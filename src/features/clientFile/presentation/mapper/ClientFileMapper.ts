import { ClientFileDTO } from '../dto/ClientFileDTO';
import { ClientFileEntity } from '../../data/entity/ClientFileEntity';

/**
 * Convertit une entit√© ClientFile en DTO
 */
export function toClientFileDTO(entity: ClientFileEntity): ClientFileDTO {
  const {
    id,
    reference,
    clientCode,
    reason,
    clientType,
    nonResident,
    status,
    lastName,
    firstName,
    email,
    maidenName,
    birthDate,
    birthCity,
    birthCountry,
    identityType,
    identityNumber,
    nationality,
    legalRepresentative,
    hasBankAccount,
    taxIdNumber,
    taxCountry,
    homeAddress,
    postalAddress,
    taxResidenceCountry,
    phoneNumbers,
    profession,
    businessSector,
    activityStartDate,
    activityArea,
    incomeSources,
    monthlyIncome,
    incomeCurrency,
    fundsOriginDestination,
    assets,
    hasInternationalOps,
    transactionCountries,
    transactionCurrencies,
    offeredAccounts,
    expectedOperations,
    creditAmount,
    debitAmount,
    isPEP,
    pepType,
    pepMandate,
    pepEndDate,
    pepLinkType,
    pepLastName,
    pepFirstName,
    pepBirthDate,
    pepBirthPlace,
    riskLevel,
    classificationSource,
    degradationReason,
    fatcaStatus,
    hasUsIndications,
    usIndicationsDetails,
    validatorAdminId,
    validatorSuperAdminId,
    validationDateAdmin,
    validationDateSuper,
    rejectionReason,
    fundSources,
    fundProviderName,
    fundProviderRelation,
    fundDonationExplanation,
    createdAt,
    updatedAt,
  } = entity;

  return {
    id,
    reference,
    clientCode,
    reason,
    clientType,
    nonResident,
    status,
    lastName,
    firstName,
    email,
    maidenName,
    birthDate,
    birthCity,
    birthCountry,
    identityType,
    identityNumber,
    nationality,
    legalRepresentative,
    hasBankAccount,
    taxIdNumber,
    taxCountry,
    homeAddress,
    postalAddress,
    taxResidenceCountry,
    phoneNumbers,
    profession,
    businessSector,
    activityStartDate,
    activityArea,
    incomeSources,
    monthlyIncome,
    incomeCurrency,
    fundsOriginDestination,
    assets,
    hasInternationalOps,
    transactionCountries,
    transactionCurrencies,
    offeredAccounts,
    expectedOperations,
    creditAmount,
    debitAmount,
    isPEP,
    pepType,
    pepMandate,
    pepEndDate,
    pepLinkType,
    pepLastName,
    pepFirstName,
    pepBirthDate,
    pepBirthPlace,
    riskLevel,
    classificationSource,
    degradationReason,
    fatcaStatus,
    hasUsIndications,
    usIndicationsDetails,
    validatorAdminId,
    validatorSuperAdminId,
    validationDateAdmin,
    validationDateSuper,
    rejectionReason,
    fundSources,
    fundProviderName,
    fundProviderRelation,
    fundDonationExplanation,
    createdAt,
    updatedAt,
  };
}
